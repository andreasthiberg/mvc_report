{# templates/report.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Redovisning{% endblock %}
{% block content %}
    <h1>Redovisningssida</h1>
    <h2>Kmom01</h2>
    <h3>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h3>
    Jag har erfarenhet av objektorienterad programmering från tidigare kurser, då med Javascript och Python. Jag har alltså en ganska bra känsla för grunderna i hur klasser och objekt skrivs och används. De skillnader som jag har märkt hittills i PHP verkar mest handla om syntax.

    <h3>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h3>
    En klass skapas och ges i namn. I klassen definierar man sedan ett antal medlemsvariabler (oftast som privata, så att de bara kan användas direkt inom klassen), och metoder. Valfritt är att definiera en konstruktor som tar emot argument och direkt sätter medlemsvariablers värden. Även en destruktor är valfri, men behövs sällan.
    Man skapar sedan nya instanser (objekt) av klassen genom syntaxet syntaxet new (klassnamn). Man kan komma åt metoder och publika variabler i ett objekt genom pilnotation. 

    <h3>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h3>
    Just nu är det lite många delar i Symfony för att ha riktig koll på allt, men vi har ju använt MVC-strukturen tidigare, så den gick ganska lätt att komma igång med den och att lägga till sin egen controller och sina egna templates. Det tog ett tag att förstå hur man skulle skapa separata templates för headers och footers, men sen gick det bra.
    Just nu har jag bara lagt till grundläggande CSS, men tanken är att repetera lite SASS framöver.
    
    <h3>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla?</h3>
    Ett område som vi inte har gått igenom mycket särskilt mycket tidigare är säkerhet, hashing, osv. Så det ska bli kul att lära sig mer om. Namespaces verkar vara ett användbart koncept som jag ser fram emot att lära mig att använda. Avslutningsvis så ska det bli kul att titta närmare på hur php används med databaser, efter den senaste databas-kursen.

    <h3>Vilken är din TIL för detta kmom?</h3>
    Autoloading är ett nytt koncept för mig! Att importera klasser till höger och vänster är ju alltid lite struligt, så det verkar smidigt.

    <h2>Kmom02</h2>
<h3>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
Komposition innebär att en klass innehåller en eller flera andra klasser. I den här uppgiften gäller det exempelvis klassen CardHand, som kan innehålla ett antal object av klassen Card. Ett antal Card-objekt är i det här fallet alltså knutna till ett specifikt CardHand-objekt. Komposition är användbart för att på det här sättet knyta samman olika objekt som representerar olika "enheter" i ett program.
<br><br>
Arv används för att konstruera en ny klass med utgångspunkt i en existerande klass. Den nya klassen tar beståndsdelarna i den gamla klassen och lägger sedan till nya, alternativt justerar några av de gamla. Det är användbart för att skapa en "special-variant" av en mer allmän klass. I PHP görs detta genom att klassen definieras med ett "extends"-kommando. Man kan komma åt metoder från basklassen med prefixet "parent::".
<br><br>
Interface är en slags "ritning" för en klass, det vill säga en förteckning över vilka metoder klassen ska innehålla. För att se till att en klass följer ett interface används konstruktionen "implements <interface>" när klassen definieras. Ett interface blir en garanti för att en klass går att använda på särskilda sätt, även om man gör ändringar i klassen (som måste hålla sig inom ramarna för ett interface).
<br><br>
Ett trait är som ett stycke kod som stoppas in i en ny klass. Genom att stoppa sin kod i en trait - snarare än direkt i en klass - så kan samma trait återanvändas av flera olika klasser. Dessutom kan en enskild klass använda sig av många olika traits - i php går det nämligen inte att ärva från flera klasser, så man använder traits istället. Här användes konstruktionen "use" för att importera ett trait till en klass.


<h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
Jag är ganska nöjd med min implementation, även om det tog ett tag att få allt på plats. Det känns som att klasserna är lagom komplicerade och som att det finns ett bra samband emellan dem. En funderingen är att CardHand-klassen kanske inte behövs, i och med att varje spelare bara kan ha en "Hand" - men uppdelningen som jag har nu kan ju eventuellt bli användbar framöver om kortspel ska implementeras.

Jag är lite osäker på om jag har löst hanteringen av POST/GET-routes på bästa sätt: Som det ser ut nu så används speciella handler-routes för att ta emot POST-requests från formulär, för att dra ett antal kort osv. Men det fungerar i alla fall.

<h3>Vilken är din TIL för detta kmom?</h3>
Hur man jobbar med relativa länkar till specifika route-namn i twig-filer. Och hur man arbetar med POST/GET i en PHP-miljö som symfony!

{% endblock %}